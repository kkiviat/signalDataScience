#+TITLE: Factor Analysis
#+AUTHOR: Kira Kiviat
* PCA vs factor analysis with simulated data
** Part 1: PCA
First, we'll create three vectors X, Y and Z which we will use to generate data.
#+BEGIN_SRC R :session :results output :exports code
  set.seed(1)  
  n_obs = 100 # number of obervations to make for each variable
  factors = data.frame(X=rnorm(n_obs), Y=rnorm(n_obs), Z=rnorm(n_obs))
  X = factors$X; Y = factors$Y; Z = factors$Z
#+END_SRC


This function will take in a vector 'feature' and generate k noisy proxies to the feature, each one correlated with the feature at the level of correlation and differing from the feature by a normal error term. (i.e., the proxy is correlation*feature + e where e is normally distributed with sd = $\sqrt{(1-\mbox{correlation})^2)}$
#+BEGIN_SRC R :session :results output :exports code
  noisyProxies = function(feature, k, correlation) {
      df = data.frame(lapply(1:k, function(i)
          correlation*feature + rnorm(length(feature), 0, sqrt(1-correlation^2))))
      colnames(df) = 1:ncol(df)
      return(df)
  }
#+END_SRC


Now let's make a data frame with 4 noisy proxies to X and 3 to Y with correlation of 0.9.
#+BEGIN_SRC R :session :file images/R11341t9U.png :results output graphics :exports both
  library(corrplot)
  noisies = noisyProxies(X, k=4, correlation=0.9)
  noisies = cbind(noisies, noisyProxies(Y, k=3, correlation=0.9))
  colnames(noisies) = c("X1", "X2", "X3", "X4", "Y1", "Y2", "Y3")

  corrplot(cor(noisies))
#+END_SRC


It is clear that the X columns are highly correlated with each other and they Y columns are highly correlated with each other.

Now we will run PCA on the noisy proxies and look at the correlations between the principal components and the proxies.
#+BEGIN_SRC R :session :file images/R11341HSh.png :results output graphics :exports both
  p = prcomp(noisies, scale.=TRUE)
  corrplot(cor(noisies, p$x))
#+END_SRC


Evidently PC1 is mostly picking up on X, while PC2 is mostly picking up on Y.

Here is a plot of the correlations between the principal components and the original factors data frame:
#+BEGIN_SRC R :session :file images/R11341hmt.png :results output graphics :exports both
  corrplot(cor(factors, p$x))
#+END_SRC


Here, too, we can see that PC1 is highly correlated with X, while PC2 is highly correlated with Y.

** Part 2: Orthogonal factor analysis
In factor analysis, we pick some number $k$ and try to find a set of factors $F_1,
\ldots, F_k$ such that each variable $V_i = a_{i,1}F_1 + \ldots + a_{i,k}F_k + \varepsilon_i$. Ideally the errors $\varepsilon_i$ should be uncorrelated, so we want the correlation matrix of the errors to be as close to the identity matrix as possible. 

First we'll run factor analysis on the noisy proxies with $k=2$ factors. Using rotate="varimax" assumes that the factors are orthogonal.
#+BEGIN_SRC R :session :results output :exports code
  library(psych)
  f = fa(noisies, nfactors=2, rotate="varimax")
#+END_SRC


Here is a plot of the correlations between the extracted factors and the true factors X and Y.
#+BEGIN_SRC R :session :file images/R11341Ujb.png :results output graphics :exports both
  corrplot(cor(factors, f$scores))
#+END_SRC

We can see these extracted factors are better matched to X and Y than the first two principal components were, with nearly 0 correlation between factor 1 and Y and between factor 2 and X.

Now we will see what happens when the observed variables are random linear combinations of the latent variables, along with noise.
#+BEGIN_SRC R :session :results output :exports code
  multi_noise = data.frame(lapply(1:50, function(i) X*runif(1) +
                                                    Y*runif(1) +
                                                    Z*runif(1) +
                                                    0.5*rnorm(length(X))
                                  ))
  colnames(multi_noise) = 1:50
#+END_SRC

Let's run PCA on these variables, and look at the correlations between the first 3 principal components and the variables X, Y and Z.
#+BEGIN_SRC R :session :file images/R11341u3n.png :results output graphics :exports both
  p_multi = prcomp(multi_noise, scale.=TRUE)
  corrplot(cor(factors, p_multi$x[,1:3]))
#+END_SRC

PC1 seems to be equally correlated with each of X, Y and Z. PC2 distinguishes Y from X and Z, while PC3 distinguishes X from Z.

Now we will do factor analysis with $k=3$ factors and see how these factors are correlated with X, Y and Z.
#+BEGIN_SRC R :session :file images/R11341IM0.png :results output graphics :exports both
  f_multi = fa(multi_noise, nfactors=3, rotate="varimax")
  corrplot(cor(factors, f_multi$scores))
#+END_SRC

These factors do a much better job of capturing the true factors X, Y and Z.

** Part 3: Oblique factor analysis
Now we will look at data generated by latent factors that are not orthogonal. First we will create a new latent variable $W = 0.5*x + Y$.
#+BEGIN_SRC R :session :exports code
  W = 0.5*factors$X + factors$Y
  cor(W, factors$X)
#+END_SRC

Next, we can use noisyProxies to get 10 proxies for X and 4 for W with correlation of 0.8.
#+BEGIN_SRC R :session :file images/R11341h0V.png :results output graphics :exports both
  oblique_noisies = cbind(noisyProxies(X, 10, 0.8), noisyProxies(W, 4, 0.8))
  colnames(oblique_noisies) = c(sapply(1:10, function(i) paste0('X', i)),
                                sapply(1:4, function(i) paste0('W', i)))
  corrplot(cor(oblique_noisies))
#+END_SRC

Again, there are two clear boxes of high correlation among the X's and among the W's. However, there is also significant correlation between the X's and W's.

Now let's compare the difference between factor analysis with "varimax" and factor analysis with "oblimin" in this oblique case.

varimax:
#+BEGIN_SRC R :session :file images/R113417Ii.png :results output graphics :exports both
  f_orthog = fa(scale(oblique_noisies), nfactors=2, rotate="varimax")
  corrplot(cor(cbind(X, Y), f_orthog$scores))
#+END_SRC

oblimin:
#+BEGIN_SRC R :session :file images/R11341Vdu.png :results output graphics :exports both
  f_obli = fa(scale(oblique_noisies), nfactors=2, rotate="oblimin")
  corrplot(cor(cbind(X, Y), f_obli$scores))
#+END_SRC

oblimin does a good job capturing the true factors, with one factor that is almost exactly X, and another that is basically 0.5*X + Y. varimax is not quite as good, with the first factor being strongly correlated with X but also fairly negatively correlated with Y, and the second factor being much more Y than X.

* Factor analysis on real datasets
** Speed dating
First we'll load the aggregated speed dating dataset and pull out the 17 activity variables.
#+BEGIN_SRC R :session :results output :exports code
  library(dplyr)
  speeddating = read.csv("../datasets/speed-dating/speeddating-aggregated.csv")
  activities = select(speeddating, sports:yoga)
#+END_SRC

Now we will try factor analysis on the activities, with between 1 and 4 factors, with each of varimax and oblimin.
#+BEGIN_SRC R :session :file images/R11341UxD.png :results output graphics :exports both
  library(Rmisc)
  ortho_f = lapply(1:4, function(k) fa(activities, nfactors=k, rotate="varimax"))
  obli_f = lapply(1:4, function(k) fa(activities, nfactors=k, rotate="oblimin"))

  par(mfrow=c(2, 4))
  lapply(ortho_f, function(f) corrplot(f$loadings, is.corr=FALSE))
  lapply(obli_f, function(f) corrplot(f$loadings, is.corr=FALSE))
#+END_SRC

The first row shows the results for varimax, while the second row shows results for oblimin. A priori, I would expect oblimin to be better, as I would expect that major clusters of interests would not be entirely independent. However, in this case the results appear to be virtually identical between the two methods.

The activities seem to split pretty nicely into 4 factors, with the first being art, the second music, the third sports/exercise, and the fourth maybe casual entertainment. It seems like there could be room for a fifth factor, to break up the somewhat mixed fourth factor. Let's try that:
#+BEGIN_SRC R :session :file images/R11341uFQ.png :results output graphics :exports both
  f = fa(activities, nfactors=5, rotate="oblimin")
  corrplot(f$loadings, is.corr=FALSE)
#+END_SRC

With 5 factors, we still have art, music and sports, but now we also have a tv/movies factor and a shopping/dining/clubbing factor.

** Big 5
*** get the data
This Big 5 dataset holds people's responses to 50 personality questions, as well as personal information like age, race, gender, handedness. First, we will load the dataset and separate out the question responses for factor analysis.
#+BEGIN_SRC R :session :results output :exports both
  big5 = read.csv("../datasets/big-5/data.csv", sep='\t')
  questions = select(big5, E1:O10)
#+END_SRC

*** compare PCA and factor analysis
Now let's try comparing PCA vs factor analysis with 5 factors.
#+BEGIN_SRC R :session :file images/R11341Iac.png :results output graphics :exports both
  p_big5 = prcomp(questions, scale.=TRUE)
  f_big5 = fa(scale(questions), nfactors=5, rotate="varimax")

  par(mfrow=c(1, 2))
  corrplot(p_big5$rotation[,1:5], is.corr=FALSE)
  corrplot(f_big5$loadings, is.corr=FALSE)
#+END_SRC

Interestingly, the factor analysis splits the factors quite cleanly between the sets of questions. The principal components, however, do not separate very clearly. And, looking at the E cluster, it does indeed have positive loadings for the questions indicating extraversion, and negative loadings for the ones indicating introversion. Similar results seem to hold for the other question groups.

*** predict gender
Now let's try to predict gender, first in terms of the 50 questions, then in terms of the 5 factors we got from factor analysis. There are 4 possible values for gender here: 1=Male, 2=Female, 3=Other, 0=missed. For simplicity, for now we will limit to the ones classified as male or female. That is most of them:
#+BEGIN_SRC R :session :results output :exports both
  table(big5$gender)
#+END_SRC

This code will build the models
#+BEGIN_SRC R :session :results output :exports code
  big5_gender = big5 %>%
      select(gender, E1:O10) %>%
      filter(gender %in% c(1,2))
  big5_gender$gender = big5_gender$gender - 1
  gender_model_questions = glm(gender ~ ., big5_gender, family="binomial")

  factors_big5 = cbind(data.frame(f_big5$scores), gender=big5$gender-1) %>%
      filter(gender %in% c(0, 1)) # subtracted 1 from gender to have values 0 and 1
  gender_model_factors = glm(gender ~ ., factors_big5, family="binomial")
  coef(gender_model_factors)
#+END_SRC

Here are the coefficients of the model built on the 50 questions:
#+BEGIN_SRC R :session :results output :exports both
  summary(gender_model_questions)
#+END_SRC

And the coefficients of the model built on the 5 factors:
#+BEGIN_SRC R :session :results output :exports both
  summary(gender_model_factors)
#+END_SRC

*** Subfactors
Now we will see if we can replicate the two subfactors in each of the Big 5 personality traits.
**** Neuroticism
#+BEGIN_SRC R :session :file images/R11341iuo.png :results output graphics :exports both
  big5_neuro = select(big5, N1:N10)
  f_neuro = fa(scale(big5_neuro), nfactors=2, rotate="varimax")
  rownames(f_neuro$loadings) = c(
      'I get stressed out easily.',
      'I am relaxed most of the time.',
      'I worry about things.',
      'I seldom feel blue.',
      'I am easily disturbed.',
      'I get upset easily.',
      'I change my mood a lot.',
      'I have frequent mood swings.',
      'I get irritated easily.',
      'I often feel blue.'
  )
  corrplot(f_neuro$loadings, is.corr=FALSE)
#+END_SRC

These factors don't seem very clearly divided, but factor 1 is more focused on stress, while factor 2 is more focused on mood swings.

**** Agreeableness
#+BEGIN_SRC R :session :file images/R113418C1.png :results output graphics :exports both
  big5_agree = select(big5, A1:A10)
  f_agree = fa(scale(big5_agree), nfactors=2, rotate="varimax")
  rownames(f_agree$loadings) = c(
      'I feel little concern for others.',
      'I am interested in people.',
      'I insult people.',
      'I sympathize with others\' feelings.',
      'I am not interested in other people\'s problems.',
      'I have a soft heart.',
      'I am not really interested in others.',
      'I take time out for others.',
      'I feel others\' emotions.',
      'I make people feel at ease.'
  )
  corrplot(f_agree$loadings, is.corr=FALSE)
#+END_SRC

Factor 1 seems to be empathy, while factor 2 is interest in people.

**** Conscientiousness
#+BEGIN_SRC R :session :file images/R113417WK.png :results output graphics :exports both
  big5_consc = select(big5, C1:C10)
  f_consc = fa(scale(big5_consc), nfactors=2, rotate="varimax")
  rownames(f_consc$loadings) = c(
      'I am always prepared.',
      'I leave my belongings around.',
      'I pay attention to details.',
      'I make a mess of things.',
      'I get chores done right away.',
      'I often forget to put things back in their proper place.',
      'I like order.',
      'I shirk my duties.',
      'I follow a schedule.',
      'I am exacting in my work.'
  )
  corrplot(f_consc$loadings, is.corr=FALSE)
#+END_SRC

Factor 1 seems to be mainly diligence, while factor 2 is messiness.

**** Extraversion
#+BEGIN_SRC R :session :file images/R11341VrW.png :results output graphics :exports both
  big5_extra = select(big5, E1:E10)
  f_extra = fa(scale(big5_extra), nfactors=2, rotate="varimax")
  rownames(f_extra$loadings) = c(
      'I am the life of the party.',
      'I don\'t talk a lot.',
      'I feel comfortable around people.',
      'I keep in the background.',
      'I start conversations.',
      'I have little to say.',
      'I talk to a lot of different people at parties.',
      'I don\'t like to draw attention to myself.',
      'I don\'t mind being the center of attention.',
      'I am quiet around strangers.'
  )
  corrplot(f_extra$loadings, is.corr=FALSE)
#+END_SRC

Factor 1 is mostly about being talkative, while factor 2 is mostly about being the center of attention.

**** Openness
#+BEGIN_SRC R :session :file images/R11341v_i.png :results output graphics :exports both
  big5_open = select(big5, O1:O10)
  f_open = fa(scale(big5_open), nfactors=2, rotate="varimax")
  rownames(f_open$loadings) = c(
      'I have a rich vocabulary.',
      'I have difficulty understanding abstract ideas.',
      'I have a vivid imagination.',
      'I am not interested in abstract ideas.',
      'I have excellent ideas.',
      'I do not have a good imagination.',
      'I am quick to understand things.',
      'I use difficult words.',
      'I spend time reflecting on things.',
      'I am full of ideas.'
  )
  corrplot(f_open$loadings, is.corr=FALSE)
#+END_SRC

Factor 1 is about having ideas (creativity), while factor 2 is just focused on vocabulary.
